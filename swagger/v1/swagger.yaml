---
openapi: 3.0.1
info:
  title: RECIPE API
components:
  securitySchemes:
    bearer_auth:
      type: http
      scheme: bearer
  schemas:
    Food:
      type: object
      properties:
        id:
          type: integer
          example: 2
        name:
          type: string
          example: Tomatoes
        unit:
          type: string
          example: g
        price_per_unit:
          type: string
          example: '0.01'
    Recipe:
      type: object
      properties:
        id:
          type: integer
          example: 2
        name:
          type: string
          example: Hoppscotchs
        description:
          type: string
          example: really tasty food
        public:
          type: boolean
          example: false
        preparation_time:
          type: integer
          example: 360
        cooking_time:
          type: integer
          example: 360
        author:
          "$ref": "#/components/schemas/User"
        foods:
          type: array
          items:
            "$ref": "#/components/schemas/UserFood"
    UserFood:
      type: object
      properties:
        food:
          "$ref": "#/components/schemas/Food"
        quantity:
          type: string
          example: '0.01'
    User:
      type: object
      properties:
        id:
          type: integer
          example: 2
        name:
          type: string
          example: Scott Wells
        email:
          type: string
          example: scott_wells@test.com
        created_at:
          type: string
          example: '2023-02-22T02:16:55.863Z'
    status:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Signed up sucessfully.
    ErrorResponses:
      type: object
      properties:
        name:
          type: array
          items:
            type: string
            example:
            - can't be blank
        unit:
          type: array
          items:
            type: string
            example:
            - can't be blank
            - is not included in the list
        price_per_unit:
          type: array
          items:
            type: string
            example:
            - can't be blank
            - is not a number
paths:
  "/current_user":
    get:
      summary: Get current user
      security:
      - bearer_auth: []
      responses:
        '401':
          description: Unauthorized
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
  "/foods":
    get:
      summary: Get foods List
      security:
      - bearer_auth: []
      responses:
        '401':
          description: Unauthorized
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Food"
    post:
      summary: Create a food
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '401':
          description: Unauthorized
        '403':
          description: You are not authorized to access this page.
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponses"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Food"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Tomatoes
                unit:
                  type: string
                  example: g
                price_per_unit:
                  type: number
                  example: 0.01
              required:
              - name
              - unit
              - price_per_unit
  "/recipes":
    get:
      summary: Get User current Recipes List
      security:
      - bearer_auth: []
      responses:
        '401':
          description: Unauthorized
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Recipe"
    post:
      summary: Create a Recipe
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponses"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserFood"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipe:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Hoppscotchs
                    description:
                      type: string
                      example: really tasty food
                    public:
                      type: boolean
                      example: false
                    preparation_time:
                      type: integer
                      example: 360
                    cooking_time:
                      type: integer
                      example: 360
                    foods:
                      type: array
                      items:
                        type: object
                        properties:
                          food_id:
                            type: integer
                            example: 1
                          quantity:
                            type: numericality
                            example: 1.1
                        required:
                        - food_id
                        - quantity
                  required:
                  - name
                  - description
                  - preparation_time
                  - cooking_time
                  - public
              required:
              - recipe
  "/user_foods":
    get:
      summary: Get User foods List
      security:
      - bearer_auth: []
      responses:
        '401':
          description: Unauthorized
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserFood"
    post:
      summary: Create a User food
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponses"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserFood"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                food_id:
                  type: integer
                  example: 2
                quantity:
                  type: number
                  example: 0.01
              required:
              - food_id
              - quantity
  "/user_foods/{id}":
    get:
      summary: get User Food info
      security:
      - bearer_auth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '401':
          description: Unauthorized
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserFood"
    delete:
      summary: delete a User food
      security:
      - bearer_auth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '401':
          description: Unauthorized
        '204':
          description: No Content
  "/signup":
    post:
      summary: signup
      parameters: []
      responses:
        '200':
          description: OK
          headers:
            Authorization:
              schema:
                type: string
              description: bearer token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    "$ref": "#/components/schemas/status"
                  data: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Swagger
                    email:
                      type: string
                      example: swagger@rswag.com
                    password:
                      type: string
                      example: swagger123
              required:
              - email
              - password
              - name
  "/login":
    post:
      summary: login
      parameters: []
      responses:
        '200':
          description: OK
          headers:
            Authorization:
              schema:
                type: string
              description: bearer token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    "$ref": "#/components/schemas/status"
                  data:
                    "$ref": "#/components/schemas/User"
        '401':
          description: Invalid Email or password.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid Email or password.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      example: swagger@rswag.com
                    password:
                      type: string
                      example: swagger123
              required:
              - email
              - password
  "/logout":
    delete:
      summary: logout
      security:
      - bearer_auth: []
      responses:
        '401':
          description: Unauthorized
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/status"
